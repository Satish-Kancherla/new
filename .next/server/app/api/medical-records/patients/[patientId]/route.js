(()=>{var e={};e.id=780,e.ids=[780],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},6979:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>m,routeModule:()=>u,serverHooks:()=>x,workAsyncStorage:()=>c,workUnitAsyncStorage:()=>l});var s={};t.r(s),t.d(s,{GET:()=>d});var a=t(2706),i=t(8203),n=t(5994),o=t(9187),p=t(5600);async function d(e,{params:r}){try{let e=(await r).patientId,t=await p.A.medicalRecord.findUnique({where:{patientId:e}});if(!t)return o.NextResponse.json({error:"Patient not found"},{status:404});return o.NextResponse.json(t)}catch(e){return console.error("Error searching for patient:",e),o.NextResponse.json({error:"Failed to search for patient"},{status:500})}}let u=new a.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/medical-records/patients/[patientId]/route",pathname:"/api/medical-records/patients/[patientId]",filename:"route",bundlePath:"app/api/medical-records/patients/[patientId]/route"},resolvedPagePath:"D:\\Practice-2\\new\\src\\app\\api\\medical-records\\patients\\[patientId]\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:c,workUnitAsyncStorage:l,serverHooks:x}=u;function m(){return(0,n.patchFetch)({workAsyncStorage:c,workUnitAsyncStorage:l})}},6487:()=>{},8335:()=>{},5600:(e,r,t)=>{"use strict";t.d(r,{A:()=>a});let s=require("@prisma/client"),a=globalThis.prisma??new s.PrismaClient}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[638,452],()=>t(6979));module.exports=s})();