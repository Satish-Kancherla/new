(()=>{var e={};e.id=356,e.ids=[356],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},6459:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>w,routeModule:()=>l,serverHooks:()=>j,workAsyncStorage:()=>x,workUnitAsyncStorage:()=>m});var s={};t.r(s),t.d(s,{DELETE:()=>p,GET:()=>c,PUT:()=>u});var o=t(2706),a=t(8203),n=t(5994),i=t(9187),d=t(5600);async function c(e,{params:r}){let t=(await r).id;try{let e=await d.A.medicalRecord.findUnique({where:{id:t}});if(!e)return i.NextResponse.json({error:"Medical record not found"},{status:404});return i.NextResponse.json(e)}catch(e){return console.error("Error fetching medical record:",e),i.NextResponse.json({error:"Failed to fetch medical record"},{status:500})}}async function u(e,{params:r}){let t;let s=(await r).id;try{t=await e.json()}catch(e){return i.NextResponse.json({error:"Invalid JSON in request body"},{status:400})}if(!t||"object"!=typeof t)return i.NextResponse.json({error:"Request body must be a valid JSON object"},{status:400});delete t.id,delete t.createdAt,delete t.updatedAt;try{let e=await d.A.medicalRecord.update({where:{id:s},data:t});return i.NextResponse.json(e)}catch(e){return console.error("Error updating record:",e),i.NextResponse.json({error:"Failed to update record"},{status:500})}}async function p(e,{params:r}){let t=(await r).id;try{return await d.A.medicalRecord.delete({where:{id:t}}),i.NextResponse.json({message:"Record deleted successfully"})}catch(e){return console.error("Error deleting record:",e),i.NextResponse.json({error:"Failed to delete record"},{status:500})}}let l=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/medical-records/[id]/route",pathname:"/api/medical-records/[id]",filename:"route",bundlePath:"app/api/medical-records/[id]/route"},resolvedPagePath:"D:\\Practice-2\\new\\src\\app\\api\\medical-records\\[id]\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:x,workUnitAsyncStorage:m,serverHooks:j}=l;function w(){return(0,n.patchFetch)({workAsyncStorage:x,workUnitAsyncStorage:m})}},6487:()=>{},8335:()=>{},5600:(e,r,t)=>{"use strict";t.d(r,{A:()=>o});let s=require("@prisma/client"),o=globalThis.prisma??new s.PrismaClient}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[638,452],()=>t(6459));module.exports=s})();