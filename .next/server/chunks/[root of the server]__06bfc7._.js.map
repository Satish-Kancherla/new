{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Practice-2/new/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prismaClientSingleton = () => {\r\n  return new PrismaClient()\r\n}\r\n\r\ntype PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClientSingleton | undefined\r\n}\r\n\r\nconst prisma = globalForPrisma.prisma ?? prismaClientSingleton()\r\n\r\nexport default prisma\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAIA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI;uCAE1B;AAEf,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Practice-2/new/src/app/api/medical-records/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport prisma from '@/lib/prisma'\r\n\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: Promise<{ id: string }>}\r\n  \r\n) {\r\n  const id = (await params).id;\r\n  try {\r\n    const record = await prisma.medicalRecord.findUnique({\r\n      where: { id }\r\n    })\r\n\r\n    if (!record) {\r\n      return NextResponse.json(\r\n        { error: 'Medical record not found' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    return NextResponse.json(record)\r\n  } catch (error) {\r\n    console.error('Error fetching medical record:', error)\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch medical record' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest, { params }: { params: { id: string } }) {\r\n  const id = params.id;\r\n  let body;\r\n\r\n  try {\r\n    body = await request.json();\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Invalid JSON in request body\" }, { status: 400 });\r\n  }\r\n\r\n  if (!body || typeof body !== 'object') {\r\n    return NextResponse.json({ error: \"Request body must be a valid JSON object\" }, { status: 400 });\r\n  }\r\n\r\n  // Remove id, createdAt, and updatedAt from the body\r\n  delete body.id;\r\n  delete body.createdAt;\r\n  delete body.updatedAt;\r\n\r\n  try {\r\n    const updatedRecord = await prisma.medicalRecord.update({\r\n      where: { id },\r\n      data: body,\r\n    });\r\n    return NextResponse.json(updatedRecord);\r\n  } catch (error) {\r\n    console.error(\"Error updating record:\", error);\r\n    return NextResponse.json({ error: \"Failed to update record\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {\r\n  const id = (await params).id;\r\n  try {\r\n      await prisma.medicalRecord.delete({\r\n          where: { id },\r\n      });\r\n      return NextResponse.json({ message: \"Record deleted successfully\" });\r\n  } catch (error) {\r\n      console.error(\"Error deleting record:\", error);\r\n      return NextResponse.json({ error: \"Failed to delete record\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAAsC;IAG9C,MAAM,KAAK,CAAC,MAAM,MAAM,EAAE,EAAE;IAC5B,IAAI;QACF,MAAM,SAAS,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,UAAU,CAAC;YACnD,OAAO;gBAAE;YAAG;QACd;QAEA,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAA8B;IACpF,MAAM,KAAK,OAAO,EAAE;IACpB,IAAI;IAEJ,IAAI;QACF,OAAO,MAAM,QAAQ,IAAI;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;IAEA,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2C,GAAG;YAAE,QAAQ;QAAI;IAChG;IAEA,oDAAoD;IACpD,OAAO,KAAK,EAAE;IACd,OAAO,KAAK,SAAS;IACrB,OAAO,KAAK,SAAS;IAErB,IAAI;QACF,MAAM,gBAAgB,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YACtD,OAAO;gBAAE;YAAG;YACZ,MAAM;QACR;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF;AAIO,eAAe,OAAO,OAAgB,EAAE,EAAE,MAAM,EAAuC;IAC5F,MAAM,KAAK,CAAC,MAAM,MAAM,EAAE,EAAE;IAC5B,IAAI;QACA,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YAC9B,OAAO;gBAAE;YAAG;QAChB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8B;IACtE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}