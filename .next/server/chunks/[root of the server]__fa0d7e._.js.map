{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Practice-2/new/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prismaClientSingleton = () => {\r\n  return new PrismaClient()\r\n}\r\n\r\ntype PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClientSingleton | undefined\r\n}\r\n\r\nconst prisma = globalForPrisma.prisma ?? prismaClientSingleton()\r\n\r\nexport default prisma\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAIA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI;uCAE1B;AAEf,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Practice-2/new/src/app/api/medical-records/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/lib/prisma\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n    const searchParams = request.nextUrl.searchParams;\r\n    const patientId = searchParams.get(\"id\");\r\n\r\n    try {\r\n        const records = await prisma.medicalRecord.findMany({\r\n            where: patientId\r\n                ? {\r\n                      patientId: {\r\n                          contains: patientId, // Partial matching\r\n                      },\r\n                  }\r\n                : {},\r\n            orderBy: { createdAt: \"desc\" },\r\n            select: {\r\n                id: true,\r\n                patientId: true,\r\n                patientName: true,\r\n                reference: true,\r\n                caseType: true,\r\n            },\r\n        });\r\n        return NextResponse.json(records);\r\n    } catch (error) {\r\n        console.error(\"Error fetching medical records:\", error);\r\n        return NextResponse.json({ error: \"Failed to fetch medical records\" }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n    try {\r\n        const body = await request.json();\r\n        console.log(\"Body:\", body);\r\n\r\n        const lastRecord = await prisma.medicalRecord.findFirst({\r\n            orderBy: { patientId: \"desc\" },\r\n        });\r\n\r\n        const lastPatientId = lastRecord ? parseInt(lastRecord.patientId) : 99;\r\n        const newPatientId = (lastPatientId + 1).toString().padStart(3, \"0\");\r\n\r\n        const newRecord = await prisma.medicalRecord.create({\r\n            data: {\r\n                ...body,\r\n                patientId: newPatientId,\r\n                regDate: new Date(body.regDate),\r\n            },\r\n        });\r\n\r\n        return NextResponse.json(newRecord, { status: 201 });\r\n    } catch (error) {\r\n        console.error(\"Error creating medical record:\", error);\r\n        return NextResponse.json({ error: \"Failed to create medical record\" }, { status: 500 });\r\n    }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC1C,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;IACjD,MAAM,YAAY,aAAa,GAAG,CAAC;IAEnC,IAAI;QACA,MAAM,UAAU,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;YAChD,OAAO,YACD;gBACI,WAAW;oBACP,UAAU;gBACd;YACJ,IACA,CAAC;YACP,SAAS;gBAAE,WAAW;YAAO;YAC7B,QAAQ;gBACJ,IAAI;gBACJ,WAAW;gBACX,aAAa;gBACb,WAAW;gBACX,UAAU;YACd;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACJ;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,SAAS;QAErB,MAAM,aAAa,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,SAAS,CAAC;YACpD,SAAS;gBAAE,WAAW;YAAO;QACjC;QAEA,MAAM,gBAAgB,aAAa,SAAS,WAAW,SAAS,IAAI;QACpE,MAAM,eAAe,CAAC,gBAAgB,CAAC,EAAE,QAAQ,GAAG,QAAQ,CAAC,GAAG;QAEhE,MAAM,YAAY,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YAChD,MAAM;gBACF,GAAG,IAAI;gBACP,WAAW;gBACX,SAAS,IAAI,KAAK,KAAK,OAAO;YAClC;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,WAAW;YAAE,QAAQ;QAAI;IACtD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACJ"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}