{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Practice-2/new/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prismaClientSingleton = () => {\r\n  return new PrismaClient()\r\n}\r\n\r\ntype PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClientSingleton | undefined\r\n}\r\n\r\nconst prisma = globalForPrisma.prisma ?? prismaClientSingleton()\r\n\r\nexport default prisma\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAIA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI;uCAE1B;AAEf,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Practice-2/new/src/app/api/stats/route.ts"],"sourcesContent":["import prisma from \"@/lib/prisma\"\r\nimport { NextResponse } from \"next/server\"\r\n\r\nexport async function GET() {\r\n    try {\r\n      const pcount = await prisma.medicalRecord.count()\r\n      // const rcount = await prisma.medicalRecord.count({\r\n      //   where: {\r\n      //     reference:''\r\n      //   }\r\n      // })\r\n      return NextResponse.json({pcount})\r\n    } catch (error) {\r\n      console.error('Error fetching medical records:', error)\r\n      return NextResponse.json(\r\n        { error: 'Failed to fetch medical records' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n  }"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IAClB,IAAI;QACF,MAAM,SAAS,MAAM,sHAAA,CAAA,UAAM,CAAC,aAAa,CAAC,KAAK;QAC/C,oDAAoD;QACpD,aAAa;QACb,mBAAmB;QACnB,MAAM;QACN,KAAK;QACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC;QAAM;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkC,GAC3C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}